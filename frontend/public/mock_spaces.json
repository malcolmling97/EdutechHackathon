[
  {
    "id": "space-system-design-notes",
    "type": "notes",
    "title": "System Design Notes",
    "folderId": "mock-folder",
    "settings": {},
    "data": {
      "content": "# 🌐 Intro to Load Balancers\n\nLoad balancers are crucial components in modern distributed systems. They distribute incoming network traffic across multiple servers to ensure no single server bears too much demand. This improves application availability, fault tolerance, and scalability.\n\n## 🔁 Types of Load Balancing Algorithms\n\n- **Round Robin**: Requests are distributed sequentially across servers.\n- **Least Connections**: Routes traffic to the server with the fewest active connections.\n- **IP Hashing**: Uses a hash of the client IP address to determine the server.\n\n## 📦 Load Balancer Layers\n\n- **Layer 4 (Transport Layer)**: Operates at the TCP/UDP level; faster but less flexible.\n- **Layer 7 (Application Layer)**: Makes routing decisions based on HTTP headers, cookies, or request data.\n\n## ☁️ Use Cases\n\n- Distribute load between microservices.\n- Automatically redirect traffic during server failures.\n- Enable blue-green deployments for zero-downtime updates."
    }
  },
  {
    "id": "space-devops-quick-tips",
    "type": "notes",
    "title": "DevOps Quick Tips",
    "folderId": "mock-folder",
    "settings": {},
    "data": {
      "content": "# 🚀 DevOps Quick Tips\n\nThese quick practices can help streamline your development and operations workflow:\n\n## 🔧 Automation\n\n- **CI/CD Pipelines**: Set up automated builds, tests, and deployments using tools like GitHub Actions, GitLab CI, or Jenkins.\n- **Infrastructure as Code (IaC)**: Manage cloud resources declaratively using Terraform or AWS CloudFormation.\n\n## 📊 Monitoring & Logging\n\n- **Prometheus & Grafana**: Use Prometheus for time-series metrics and Grafana for visual dashboards.\n- **ELK Stack (Elasticsearch, Logstash, Kibana)**: Centralize and visualize application logs.\n\n## 🔐 Security Best Practices\n\n- Rotate secrets using tools like HashiCorp Vault.\n- Use static code analysis tools like SonarQube.\n- Regularly patch dependencies and containers.\n\n## 🌩️ Cloud Readiness\n\n- Design for failure with redundancy and backups.\n- Use container orchestration platforms like Kubernetes for scalable deployments.\n- Optimize costs with auto-scaling and spot instances."
    }
  },
  {
    "id": "space-002",
    "title": "Cloud Computing",
    "type": "openended",
    "settings": {
      "generatedTypes": [
        "studyguide",
        "flashcards",
        "quiz",
        "openended"
      ]
    }
  },
  {
    "id": "space-003",
    "title": "CSCI369",
    "type": "flashcards",
    "settings": {
      "generatedTypes": [
        "openended"
      ]
    }
  },
  {
    "id": "space-004",
    "title": "CSCI321",
    "type": "studyguide",
    "settings": {
      "generatedTypes": [
        "studyguide"
      ]
    }
  },
  {
    "id": "space-005",
    "title": "ISIT216",
    "type": "quiz",
    "settings": {
      "generatedTypes": [
        "studyguide",
        "flashcards"
      ]
    }
  },
  {
    "id": "space-006",
    "title": "CSIT314",
    "type": "openended",
    "settings": {
      "generatedTypes": [
        "studyguide",
        "flashcards",
        "openended"
      ]
    }
  }
]